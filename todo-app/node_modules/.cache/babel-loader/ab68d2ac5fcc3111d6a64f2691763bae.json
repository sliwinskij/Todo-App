{"ast":null,"code":"import axios from 'axios';\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return axios.get('http://localhost:8080/basicauth', {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  }\n\n  executeJwtAuthenticationService(username, password) {\n    return axios.post('http://localhost:8080/authenticate', {\n      username,\n      password\n    });\n  }\n\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + ':' + password);\n  }\n\n  createJwtToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  registerSuccessfulLogin(username, password) {\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  }\n\n  registerSuccessfulLoginJwt(username, token) {\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setupAxiosInterceptors(this.createJwtToken(token));\n  }\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUsername() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors(basicAuthHeader) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/HP/Desktop/ReactSpringProject/todo-app/src/components/todo/AuthenticationService.js"],"names":["axios","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","executeJwtAuthenticationService","post","window","btoa","createJwtToken","token","registerSuccessfulLogin","sessionStorage","setItem","setupAxiosInterceptors","registerSuccessfulLoginJwt","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUsername","basicAuthHeader","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,iCAAiC,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAClD,WAAOJ,KAAK,CAACK,GAAN,CAAU,iCAAV,EAA6C;AAChDC,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC;AADV;AADuC,KAA7C,CAAP;AAKH;;AAEDK,EAAAA,+BAA+B,CAACN,QAAD,EAAWC,QAAX,EAAqB;AAChD,WAAOJ,KAAK,CAACU,IAAN,CAAW,oCAAX,EAAiD;AACpDP,MAAAA,QADoD;AAEpDC,MAAAA;AAFoD,KAAjD,CAAP;AAIH;;AAEDI,EAAAA,oBAAoB,CAACL,QAAD,EAAWC,QAAX,EAAqB;AACrC,WAAO,WAAWO,MAAM,CAACC,IAAP,CAAYT,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH;;AAEDS,EAAAA,cAAc,CAACC,KAAD,EAAQ;AAClB,WAAO,YAAYA,KAAnB;AACH;;AAEDC,EAAAA,uBAAuB,CAACZ,QAAD,EAAWC,QAAX,EAAqB;AACxCY,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4Cd,QAA5C;AACA,SAAKe,sBAAL,CAA4B,KAAKV,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC,CAA5B;AACH;;AACDe,EAAAA,0BAA0B,CAAChB,QAAD,EAAUW,KAAV,EAAiB;AACvCE,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4Cd,QAA5C;AACA,SAAKe,sBAAL,CAA4B,KAAKL,cAAL,CAAoBC,KAApB,CAA5B;AACH;;AAEDM,EAAAA,MAAM,GAAG;AACLJ,IAAAA,cAAc,CAACK,UAAf,CAA0B,mBAA1B;AACH;;AAEDC,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDL,EAAAA,sBAAsB,CAACQ,eAAD,EAAkB;AAEpC1B,IAAAA,KAAK,CAAC2B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKR,cAAT,EAAyB;AACrBQ,QAAAA,MAAM,CAACxB,OAAP,CAAeC,aAAf,GAA+BmB,eAA/B;AACH;;AACD,aAAOI,MAAP;AACH,KANL;AAQH;;AA5DuB;;AA+D5B,eAAe,IAAI7B,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\r\n\r\nclass AuthenticationService {\r\n\r\n    executeBasicAuthenticationService(username, password) {\r\n        return axios.get('http://localhost:8080/basicauth', {\r\n            headers: {\r\n                authorization: this.createBasicAuthToken(username, password)\r\n            }\r\n        })\r\n    }\r\n\r\n    executeJwtAuthenticationService(username, password) {\r\n        return axios.post('http://localhost:8080/authenticate', {\r\n            username,\r\n            password\r\n        })\r\n    }\r\n\r\n    createBasicAuthToken(username, password) {\r\n        return 'Basic ' + window.btoa(username + ':' + password)\r\n    }\r\n\r\n    createJwtToken(token) {\r\n        return 'Bearer ' + token\r\n    }\r\n\r\n    registerSuccessfulLogin(username, password) {\r\n        sessionStorage.setItem('authenticatedUser', username);\r\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\r\n    }\r\n    registerSuccessfulLoginJwt(username,token) {\r\n        sessionStorage.setItem('authenticatedUser', username);\r\n        this.setupAxiosInterceptors(this.createJwtToken(token))\r\n    }\r\n\r\n    logout() {\r\n        sessionStorage.removeItem('authenticatedUser');\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem('authenticatedUser')\r\n        if (user === null) return false;\r\n        return true\r\n    }\r\n\r\n    getLoggedInUsername() {\r\n        let user = sessionStorage.getItem('authenticatedUser')\r\n        if (user === null) return '';\r\n        return user\r\n    }\r\n\r\n    setupAxiosInterceptors(basicAuthHeader) {\r\n\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isUserLoggedIn) {\r\n                    config.headers.authorization = basicAuthHeader\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}