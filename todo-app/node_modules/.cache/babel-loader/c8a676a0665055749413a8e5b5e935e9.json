{"ast":null,"code":"import axios from 'axios';\nimport API_URL from '../../Constants.js';\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return axios.get('http://localhost:8080/basicauth', {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  }\n\n  executeJwtAuthenticationService(username, password) {\n    return axios.post('http://localhost:8080/authenticate', {\n      username,\n      password\n    });\n  }\n\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + ':' + password);\n  }\n\n  createJwtToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  registerSuccessfulLogin(username, password) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  }\n\n  registerSuccessfulLoginJwt(username, token) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createJwtToken(token));\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUsername() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/HP/Desktop/ReactSpringProject/todo-app/src/components/todo/AuthenticationService.js"],"names":["axios","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","executeJwtAuthenticationService","post","window","btoa","createJwtToken","token","registerSuccessfulLogin","sessionStorage","setItem","setupAxiosInterceptors","registerSuccessfulLoginJwt","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUsername","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAEA,OAAO,MAAMC,gCAAgC,GAAG,mBAAzC;;AAEP,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,iCAAiC,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAClD,WAAON,KAAK,CAACO,GAAN,CAAU,iCAAV,EAA6C;AAChDC,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC;AADV;AADuC,KAA7C,CAAP;AAKH;;AAEDK,EAAAA,+BAA+B,CAACN,QAAD,EAAWC,QAAX,EAAqB;AAChD,WAAON,KAAK,CAACY,IAAN,CAAW,oCAAX,EAAiD;AACpDP,MAAAA,QADoD;AAEpDC,MAAAA;AAFoD,KAAjD,CAAP;AAIH;;AAEDI,EAAAA,oBAAoB,CAACL,QAAD,EAAWC,QAAX,EAAqB;AACrC,WAAO,WAAWO,MAAM,CAACC,IAAP,CAAYT,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH;;AAEDS,EAAAA,cAAc,CAACC,KAAD,EAAQ;AAClB,WAAO,YAAYA,KAAnB;AACH;;AAEDC,EAAAA,uBAAuB,CAACZ,QAAD,EAAWC,QAAX,EAAqB;AACxCY,IAAAA,cAAc,CAACC,OAAf,CAAuBjB,gCAAvB,EAAyDG,QAAzD;AACA,SAAKe,sBAAL,CAA4B,KAAKV,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC,CAA5B;AACH;;AACDe,EAAAA,0BAA0B,CAAChB,QAAD,EAAWW,KAAX,EAAkB;AACxCE,IAAAA,cAAc,CAACC,OAAf,CAAuBjB,gCAAvB,EAAyDG,QAAzD;AACA,SAAKe,sBAAL,CAA4B,KAAKL,cAAL,CAAoBC,KAApB,CAA5B;AACH;;AAEDM,EAAAA,MAAM,GAAG;AACLJ,IAAAA,cAAc,CAACK,UAAf,CAA0BrB,gCAA1B;AACH;;AAEDsB,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuBxB,gCAAvB,CAAX;AACA,QAAIuB,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuBxB,gCAAvB,CAAX;AACA,QAAIuB,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDL,EAAAA,sBAAsB,CAACJ,KAAD,EAAQ;AAE1BhB,IAAAA,KAAK,CAAC4B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKP,cAAT,EAAyB;AACrBO,QAAAA,MAAM,CAACvB,OAAP,CAAeC,aAAf,GAA+BO,KAA/B;AACH;;AACD,aAAOe,MAAP;AACH,KANL;AAQH;;AA5DuB;;AA+D5B,eAAe,IAAI5B,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\r\nimport API_URL from '../../Constants.js'\r\n\r\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\r\n\r\nclass AuthenticationService {\r\n\r\n    executeBasicAuthenticationService(username, password) {\r\n        return axios.get('http://localhost:8080/basicauth', {\r\n            headers: {\r\n                authorization: this.createBasicAuthToken(username, password)\r\n            }\r\n        })\r\n    }\r\n\r\n    executeJwtAuthenticationService(username, password) {\r\n        return axios.post('http://localhost:8080/authenticate', {\r\n            username,\r\n            password\r\n        })\r\n    }\r\n\r\n    createBasicAuthToken(username, password) {\r\n        return 'Basic ' + window.btoa(username + ':' + password)\r\n    }\r\n\r\n    createJwtToken(token) {\r\n        return 'Bearer ' + token\r\n    }\r\n\r\n    registerSuccessfulLogin(username, password) {\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\r\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\r\n    }\r\n    registerSuccessfulLoginJwt(username, token) {\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\r\n        this.setupAxiosInterceptors(this.createJwtToken(token))\r\n    }\r\n\r\n    logout() {\r\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return false;\r\n        return true\r\n    }\r\n\r\n    getLoggedInUsername() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return '';\r\n        return user\r\n    }\r\n\r\n    setupAxiosInterceptors(token) {\r\n\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isUserLoggedIn) {\r\n                    config.headers.authorization = token\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}